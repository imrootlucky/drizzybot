#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.3 on Sun Jun 23 16:26:30 2019
#

import wx

#import actions
import time
import ccxt

from actions import setsloss, setsell
from actionscoinbase import getcurprice, setapi, buyit, sellit



# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PriceCheck(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PriceCheck.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((500, 500))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.start = wx.ToggleButton(self, wx.ID_ANY, "start")

        #start button
        self.start.Bind(wx.EVT_TOGGLEBUTTON, self.startbot)
        
        #Place for the Keys
        self.key_input = wx.TextCtrl(self, wx.ID_ANY, "34e5215a4fdeb1db1706acec68e43e6d")
        self.sec_input = wx.TextCtrl(self, wx.ID_ANY, '/hIfCWNlp24E84v2cgn8IJol/rUeOPOiG6uhvTG4iqbU49Vk5PCBogHYY0d4lNpdN5mrwjeb6xYy/Xrbcr4WKg==')
        self.passphrase = wx.TextCtrl(self, wx.ID_ANY, 'Hu0ch3!@#')
        
        #place for exchange
        #self.exch_input = wx.TextCtrl(self, wx.ID_ANY, "binance")
        
        #place for market
        self.mkt_input = wx.TextCtrl(self, wx.ID_ANY, "BTC-USD")
        
        #Buy target field
        self.buy_tgt = wx.TextCtrl(self, wx.ID_ANY, "10000")
        
        #buy limit field
        self.buy_limit = wx.TextCtrl(self, wx.ID_ANY, "50")
        
        #set profit goal and stop loss as  percentage
        self.min_profit = wx.TextCtrl(self, wx.ID_ANY, ".001")
        self.stop_loss = wx.TextCtrl(self, wx.ID_ANY, ".001")
        
      
        
        #set it up
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PriceCheck.__set_properties
        self.SetTitle("Price Check")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PriceCheck.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(9, 2, 0, 0)
        sizer_1.Add(self.start, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 4)
        self.pricetkr = wx.StaticText(self, wx.ID_ANY, "Awaiting start")
        self.stattkr = wx.StaticText(self, wx.ID_ANY, "IDLE")
        
        sizer_1.Add(self.pricetkr, 0, wx.ALIGN_BOTTOM | wx.ALIGN_CENTER | wx.ALIGN_RIGHT | wx.ALL, 0)
        
        
        grid_sizer_1.Add(self.key_input, 0, 0, 0)
        api_key = wx.StaticText(self, wx.ID_ANY, "API Key")
        grid_sizer_1.Add(api_key, 0, 0, 0)
        grid_sizer_1.Add(self.sec_input, 0, 0, 0)
        api_secret = wx.StaticText(self, wx.ID_ANY, "API Secret")
        grid_sizer_1.Add(api_secret, 0, 0, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        
        #passphrase text box
        grid_sizer_1.Add(self.passphrase, 0, 0, 0)
        passtext = wx.StaticText(self, wx.ID_ANY, "Passphrase")
        grid_sizer_1.Add(passtext, 0, 0, 0)
        
        #box and text for buy target
        grid_sizer_1.Add(self.buy_tgt, 0, 0, 0)
        target_text = wx.StaticText(self, wx.ID_ANY, "Enter target price")
        grid_sizer_1.Add(target_text, 0, 0, 0)
        
        #box and text for market
        grid_sizer_1.Add(self.mkt_input, 0, 0, 0)
        mkt_text = wx.StaticText(self, wx.ID_ANY, "Enter Market Symbol")
        grid_sizer_1.Add(mkt_text, 0, 0, 0)
        
        #box and text for buy limit
        grid_sizer_1.Add(self.buy_limit, 0, 0, 0)
        limit_text = wx.StaticText(self, wx.ID_ANY, "Enter buy limit in base units (max risk)")
        grid_sizer_1.Add(limit_text, 0, 0, 0)
        
        #box and text for min profit
        grid_sizer_1.Add(self.min_profit, 0, 0, 0)
        profit_text = wx.StaticText(self, wx.ID_ANY, "enter minimum profit as a percentage")
        grid_sizer_1.Add(profit_text, 0, 0, 0)
        
        #box and text for stop loss
        grid_sizer_1.Add(self.stop_loss, 0, 0, 0)
        stloss_text = wx.StaticText(self, wx.ID_ANY, "Enter stop loss percentage")
        grid_sizer_1.Add(stloss_text, 0, 0, 0)
        grid_sizer_1.Add(self.stattkr, 0, 0, 0)
        
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade



#what the button does
    def OnToggle(self, event):
        
        exch_conn = setapi(self.key_input.GetValue(), self.sec_input.GetValue(), self.passphrase.GetValue()) #connects to exchange and saves it
        state = event.GetEventObject().GetValue()
        #print(self.state)
        #rint("onnnd")
        #print(event.GetEventObject().GetValue())
        
        if state == True:
            #print(self.state)
            self.state = 1
            event.GetEventObject().SetLabel("Stop") #change button text
            self.start.Bind(wx.EVT_TOGGLEBUTTON,self.OnToggleOff)
            while self.state == 1:
                time.sleep(1)
                price = getcurprice(self.mkt_input.GetValue())
                #print(price)
                self.pricetkr.SetLabel(str(price)) #gotta turn it to a strong
                self.stattkr.SetLabel("Waiting for appropriate price.")
                wx.Yield()
                
            else:
                event.GetEventObject().SetLabel("Start")
    
#   button to turn it off    
    def OnToggleOff(self, event):
        
        event.GetEventObject().SetLabel("Start")
        self.start.Bind(wx.EVT_TOGGLEBUTTON,self.startbot)
        self.stattkr.SetLabel("toggled off")
        
     
        

    #trailing stop loss attempt add buy target, 
    def startbot(self, event):
        done = 0
        bought = 0
        round = 1
        state = event.GetEventObject().GetValue()
        
        exch_conn = setapi(self.key_input.GetValue(), self.sec_input.GetValue(), self.passphrase.GetValue()) #connects to exchange and saves it
        market = self.mkt_input.GetValue()
        btarget = float(self.buy_tgt.GetValue())
        buy_limit = self.buy_limit.GetValue()
        min_profit = float(self.min_profit.GetValue())
        stp_loss = float(self.stop_loss.GetValue())
        
        
        while done == 0 and state == True:
            #print('round =', round)
            time.sleep(1)
            cprice = float(getcurprice(market)) #get the price
           
            #update ticker
            self.pricetkr.SetLabel(str(cprice))
            #update the button lol
            event.GetEventObject().SetLabel("Stop")
            boughtp = 0
            
            
            print('round: ' + str(round))
            
            if round == 1:
                sellprice = setsell(float(cprice), min_profit)
                lossprice = setsloss(cprice, stp_loss)
                print('got price:' + str(cprice))
                print('sellprice is ', str(sellprice))
                       
            if cprice <= btarget and bought == 0:
                numberbought = buyit(market, buy_limit, exch_conn)
                boughtp  = cprice
                print('bought for ', boughtp)
                bought = 1
                sellprice = setsell(boughtp, min_profit)
                round += 1
                self.stattkr.SetLabel("bought price is  " + str(boughtp))
                
            elif cprice >= btarget and bought == 0:
                print('price is too high:', cprice)
                
            
            if cprice < lossprice and bought == 1:
                soldprice = sellit(market, numberbought, exch_conn)
                print ('STOPLOSS MET: selling for ', cprice)
                round = 1
                bought = 0
                done = 1
                self.start.SetValue(False)
                print('bought = ', str(bought))
                
            
            if cprice > boughtp and bought == 1: # if the price is up set it as the new bought price
                #sellit(numberbought)
                
                print('sellprice is ', sellprice, 'in loop')
                print ('were up')
                stp_loss = float(self.stop_loss.GetValue())
                lossprice = setsloss(cprice, stp_loss)
                print('Sellprice is now ', sellprice, ' with stoploss')            

            else:
                #print('price is ', cprice)
                #print('nothing')
                round += 1
                
            
            
                
            
            wx.Yield()
            self.start.Bind(wx.EVT_TOGGLEBUTTON,self.OnToggleOff)
            state = event.GetEventObject().GetValue()
            #print("sellprice is ", sellprice)
            #print("stoploss is", lossprice)
            


class MyApp(wx.App):
    def OnInit(self):
        self.frame = PriceCheck(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
